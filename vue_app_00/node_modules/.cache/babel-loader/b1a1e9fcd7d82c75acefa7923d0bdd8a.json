{"remainingRequest":"c:\\Users\\tarena\\Desktop\\vue_app_000\\vue_app_00\\node_modules\\babel-loader\\lib\\index.js!c:\\Users\\tarena\\Desktop\\vue_app_000\\vue_app_00\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!c:\\Users\\tarena\\Desktop\\vue_app_000\\vue_app_00\\src\\components\\xz\\cart.vue?vue&type=script&lang=js","dependencies":[{"path":"c:\\Users\\tarena\\Desktop\\vue_app_000\\vue_app_00\\src\\components\\xz\\cart.vue","mtime":1564998339956},{"path":"c:\\Users\\tarena\\Desktop\\vue_app_000\\vue_app_00\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1534853416000},{"path":"c:\\Users\\tarena\\Desktop\\vue_app_000\\vue_app_00\\node_modules\\babel-loader\\lib\\index.js","mtime":1529635966000},{"path":"c:\\Users\\tarena\\Desktop\\vue_app_000\\vue_app_00\\node_modules\\vue-loader\\lib\\index.js","mtime":1527860006000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/web.dom.iterable\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  data: function data() {\n    return {\n      list: []\n    };\n  },\n  methods: {\n    selectAll: function selectAll(e) {\n      //全选按钮处理函数\n      //1获取全选按钮的状态\n      var cb = e.target.checked; //console.log(cb)\n      //2创建循环遍历购物车数组\n\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = this.list[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var item = _step.value;\n          //3将全选的状态复制购物车商品选中状态\n          //item.cb  商品状态=cb全选按钮状态\n          item.cb = cb;\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    },\n    delMitem: function delMitem() {\n      var _this = this;\n\n      //功能：删除多个购物车中的指定商品\n      // 1：创建变量保存多个购物车中id值\n      var str = \"\"; // 2：创建循环遍历数组获取状态为true的id值\n\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = this.list[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var item = _step2.value;\n\n          if (item.cb) {\n            //ture 当前商品被选中n\n            str += item.id + \",\"; //\"1,2,3\"\n          }\n        } // 2.1:判断用户是否选中了商品\n\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      if (str.length == 0) {\n        // 2.2：如果没有选中商品，显示确认消息\n        this.$messagebox(\"请选择要删除的商品\");\n        return; //停止执行\n      } // console.log(str)\n      // 3：截取字符串中最后，\n      //substring截取字符串\n      // 0          起始下标\n      //str.length-1   保留几个字符\n\n\n      str = str.substring(0, str.length - 1); // 4：显示交互提示框，再次请用户确认操作\n\n      this.$messagebox.confirm(\"是否删除数据\").then(function (res) {\n        //用户选择确认按钮！！\n        var url = \"delM\";\n        var ids = {\n          ids: str\n        }; //参数名ids:值拼接字符串\n        //发送ajax请求\n\n        _this.axios.get(url, {\n          params: ids\n        }).then(function (res) {\n          //删除多个商品执行成功，加载新的购物车列表\n          _this.loadMore(); //提示用户删除成功\n\n\n          _this.$toast(\"删除成功\");\n        });\n      }).catch(function (err) {\n        console.log(err);\n      }); // 5：发送ajax请求删除多个数据\n      // 6：提示用户删除成功\n      // 7：重新加载购物车中数据\n    },\n    delItem: function delItem(e) {\n      var _this2 = this;\n\n      //功能：删除购物车中指定商品\n      // 获取购物车的id\n      var id = e.target.dataset.id;\n      console.log(id); // 交互提示用户是否删除指定商品\n\n      this.$messagebox.confirm(\"是否删除指定商品\").then(function (action) {\n        // 同意\n        // 发送ajax 服务器端程序 ?id=id\n        var url = \"del\";\n        var obj = {\n          id: id // 返回服务器返回内容\n\n        };\n\n        _this2.axios.get(\"/del\", {\n          params: obj\n        }).then(function (res) {\n          // 重新调用  loadMore() 最新购物列\n          if (res.data.code > 0) {\n            _this2.$toast(\"删除成功\");\n\n            _this2.loadMore(); //加载最新列表\n\n          }\n        });\n      }).catch(function (err) {\n        console.log(\"取消\");\n      });\n    },\n    loadMore: function loadMore() {\n      var _this3 = this;\n\n      //功能：加载购物车中的数据\n      //当组件创建成功后调用\n      // 1:发送请求 cart\n      var url = \"cart\";\n      this.axios.get(url).then(function (res) {\n        // console.log(res);\n        // 2:获取返回结果\n        if (res.data.code == -1) {\n          // 3:如果用户没有执行登录操作\n          _this3.$messagebox(\"消息\", \"请登录\").then(function (res) {\n            //提示交互提示/跳转登录组件\n            _this3.$router.push(\"/Login\");\n\n            return;\n          });\n        } else {\n          // 4:获取数据成功\n          var list = res.data.data; // 4.1：创建循环遍历数组并且为每个元素添加cd属性表示，商品前复选框状态\n          // 注意先添加cb属性再赋值list 注意顺序\n          //###加載之前先清空\n\n          _this3.$store.commit(\"clear\");\n\n          var _iteratorNormalCompletion3 = true;\n          var _didIteratorError3 = false;\n          var _iteratorError3 = undefined;\n\n          try {\n            for (var _iterator3 = list[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n              var item = _step3.value;\n              //4.11 添加cd屬性表示狀態\n              item.cb = false; //4.12 修改共享購物車中數量值 vuex\n\n              _this3.$store.commit(\"increment\");\n            } //5:保存购物车数据\n\n          } catch (err) {\n            _didIteratorError3 = true;\n            _iteratorError3 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n                _iterator3.return();\n              }\n            } finally {\n              if (_didIteratorError3) {\n                throw _iteratorError3;\n              }\n            }\n          }\n\n          _this3.list = list;\n        }\n      });\n    }\n  },\n  created: function created() {\n    this.loadMore();\n  }\n};",{"version":3,"sources":["cart.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n    <div class=\"cart\">\r\n        <!-- cart.vue 购物车组件 -->\r\n        <!-- <h1>cart.vue</h1> -->\r\n        <!-- (1)顶部按钮:全选 -->\r\n        <div class=\"selectAll\">\r\n            全选 <input type=\"checkbox\" @change=\"selectAll\"/>\r\n        </div>\r\n        <!-- (2)购物车商品信息 -->\r\n        <div class=\"cart-item\" v-for=\"(item,i) of list\" :key=\"i\">`\r\n            <div class=\"leftImgText\">\r\n                    <input v-model=\"item.cb\" type=\"checkbox\">\r\n                <img :src=\"'http://127.0.0.1:3000/'+item.img_url\"/>\r\n                <div class=\"lname\">{{item.lname}}</div>\r\n                <div class=\"price\">{{item.price}}</div>\r\n            </div>\r\n            <mt-button @click=\"delItem\" :data-id=\"item.id\">删除</mt-button>\r\n        </div>\r\n        <!-- (3)按钮  删除选中商品 -->\r\n        <!-- 合计: -->\r\n        <div>\r\n            購物車商品數量\r\n            <span style=\"color:red\">\r\n                {{$store.getters.getCartCount}}\r\n            </span>\r\n            <mt-button @click=\"delMitem\">删除选中的商品</mt-button>\r\n            小计:<span></span>\r\n        </div>\r\n    </div>\r\n</template>\r\n<script>\r\nexport default{\r\n    data(){\r\n        return{\r\n            list:[],\r\n            \r\n        }\r\n    },\r\n    methods:{\r\n        selectAll(e){\r\n            //全选按钮处理函数\r\n            //1获取全选按钮的状态\r\n            var cb=e.target.checked;\r\n            //console.log(cb)\r\n            //2创建循环遍历购物车数组\r\n            for(var item of this.list){\r\n                //3将全选的状态复制购物车商品选中状态\r\n                //item.cb  商品状态=cb全选按钮状态\r\n                item.cb=cb;\r\n            }\r\n        },\r\n        delMitem(){\r\n            //功能：删除多个购物车中的指定商品\r\n            // 1：创建变量保存多个购物车中id值\r\n            var str=\"\";\r\n            // 2：创建循环遍历数组获取状态为true的id值\r\n            for(var item of this.list){\r\n                if(item.cb){//ture 当前商品被选中n\r\n                    str+=item.id+\",\";   //\"1,2,3\"\r\n                }\r\n            }\r\n            // 2.1:判断用户是否选中了商品\r\n            if(str.length==0){\r\n            // 2.2：如果没有选中商品，显示确认消息\r\n            this.$messagebox(\"请选择要删除的商品\");\r\n            return;//停止执行\r\n        }\r\n            // console.log(str)\r\n            // 3：截取字符串中最后，\r\n            //substring截取字符串\r\n            // 0          起始下标\r\n            //str.length-1   保留几个字符\r\n            str=str.substring(0,str.length-1);\r\n            // 4：显示交互提示框，再次请用户确认操作\r\n            this.$messagebox.confirm(\"是否删除数据\").then(res=>{\r\n                //用户选择确认按钮！！\r\n                var url=\"delM\";\r\n                var ids={ids:str};//参数名ids:值拼接字符串\r\n                //发送ajax请求\r\n                this.axios.get(url,{params:ids}).then(res=>{\r\n                    //删除多个商品执行成功，加载新的购物车列表\r\n                    this.loadMore();\r\n                    //提示用户删除成功\r\n                    this.$toast(\"删除成功\");\r\n                })\r\n            })\r\n            .catch(err=>{\r\n                console.log(err)\r\n            })\r\n            // 5：发送ajax请求删除多个数据\r\n            // 6：提示用户删除成功\r\n            // 7：重新加载购物车中数据\r\n        },\r\n        delItem(e){\r\n            //功能：删除购物车中指定商品\r\n            // 获取购物车的id\r\n            var id=e.target.dataset.id;\r\n            console.log(id)\r\n            \r\n            // 交互提示用户是否删除指定商品\r\n            this.$messagebox.confirm(\"是否删除指定商品\")\r\n            .then(action=>{\r\n                // 同意\r\n            // 发送ajax 服务器端程序 ?id=id\r\n                var url=\"del\";\r\n                var obj={id:id}\r\n                // 返回服务器返回内容\r\n                this.axios.get(\"/del\",{params:obj}).then(\r\n                    res=>{\r\n                        // 重新调用  loadMore() 最新购物列\r\n                        if(res.data.code>0){\r\n                            this.$toast(\"删除成功\");\r\n                            this.loadMore();//加载最新列表\r\n                        }\r\n                    }\r\n                )\r\n            })\r\n            .catch(err=>{console.log(\"取消\")})\r\n            \r\n        },\r\n        loadMore(){\r\n            //功能：加载购物车中的数据\r\n            //当组件创建成功后调用\r\n            // 1:发送请求 cart\r\n            var url=\"cart\";\r\n            this.axios.get(url).then(res=>{\r\n                // console.log(res);\r\n            // 2:获取返回结果\r\n            if(res.data.code==-1){\r\n                // 3:如果用户没有执行登录操作\r\n                this.$messagebox(\"消息\",\"请登录\").then(res=>{\r\n                    //提示交互提示/跳转登录组件\r\n                    this.$router.push(\"/Login\");\r\n                    return;\r\n                });\r\n            }else{\r\n                // 4:获取数据成功\r\n                var list=res.data.data;\r\n                // 4.1：创建循环遍历数组并且为每个元素添加cd属性表示，商品前复选框状态\r\n                // 注意先添加cb属性再赋值list 注意顺序\r\n                //###加載之前先清空\r\n                this.$store.commit(\"clear\");\r\n                for(var item of list){\r\n                    //4.11 添加cd屬性表示狀態\r\n                    item.cb=false;\r\n                    //4.12 修改共享購物車中數量值 vuex\r\n                    this.$store.commit(\"increment\")\r\n                }\r\n                //5:保存购物车数据\r\n                this.list=list;\r\n            }\r\n            })\r\n        }\r\n    },\r\n    created(){\r\n        this.loadMore();\r\n    },\r\n}\r\n</script>\r\n<style scoped>\r\n    /*1:商品项目元素*/\r\n    .cart-item{\r\n        display:flex;/*商品项目设置弹性布局*/\r\n        justify-content:space-between;/*子元素两端对齐*/\r\n        align-items: center;/*垂直居中*/\r\n        border-bottom:1px solid #ccc;/*底部边框*/\r\n        margin-top:25px;\r\n    }\r\n    /* 2:左侧图片与文字 */\r\n    .leftImgText{\r\n        display:flex;/*子元素水平对齐*/\r\n        align-items:center;/*垂直居中*/\r\n    }\r\n    /* 3:单独修改图片宽度和高度 */\r\n    .leftImgText img{\r\n        width:50px;height:50px;\r\n    }\r\n    /* 4:商品价格 */\r\n    .price{\r\n        margin-left:25px;\r\n        color:#f00;\r\n    }\r\n</style>"],"sourceRoot":"src\\components\\xz"}]}